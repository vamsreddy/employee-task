{"ast":null,"code":"var _jsxFileName = \"/home/vamshidhar/Desktop/projects/ReactTask/employee/src/Components/Dashboard/update.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Update = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  console.log(id);\n  const [employee, setEmployee] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Fetch employeesData from local storage\n    const employeesData = JSON.parse(localStorage.getItem('employees_data')) || [];\n    console.log(employeesData);\n    // Find the employee with the matching id\n    const selectedEmployee = employeesData.find(emp => emp.id == id);\n    console.log(selectedEmployee);\n    // Update the state with the selected employee\n    setEmployee(selectedEmployee);\n  }, [id]);\n\n  // Initial state should be set when employee data is available\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n\n  // Set initial state when employee data is available\n  useEffect(() => {\n    if (employee) {\n      setFirstName(employee.firstName);\n      setLastName(employee.lastName);\n      setEmail(employee.email);\n    }\n  }, [employee]);\n  if (!employee) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No Employee Found...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 12\n    }, this); // You may want to show a loading message or redirect if the employee is not found.\n  }\n  const handleUpdate = e => {\n    e.preventDefault();\n    if (!firstName || !lastName || !email) {\n      alert('Error!\\nAll fields are required.');\n      return;\n    }\n    const updatedEmployee = {\n      id: parseInt(id),\n      firstName,\n      lastName,\n      email\n    };\n\n    // Update the employee in the local storage\n    const updatedEmployees = JSON.parse(localStorage.getItem('employees_data')) || [];\n    const index = updatedEmployees.findIndex(emp => emp.id === parseInt(id));\n    console.log('index', index);\n    updatedEmployees.splice(index, 1, updatedEmployee);\n    localStorage.setItem('employees_data', JSON.stringify(updatedEmployees));\n    setEmployee(updatedEmployee);\n    alert(`Success!\\n${updatedEmployee.firstName} ${updatedEmployee.lastName}'s data has been updated.`);\n\n    // Navigate to the dashboard after the update\n    navigate('/dashboard');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"small-container\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUpdate,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Edit Employee\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"firstName\",\n        children: \"First Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"firstName\",\n        type: \"text\",\n        name: \"firstName\",\n        value: firstName,\n        onChange: e => setFirstName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"lastName\",\n        children: \"Last Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"lastName\",\n        type: \"text\",\n        name: \"lastName\",\n        value: lastName,\n        onChange: e => setLastName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"email\",\n        type: \"email\",\n        name: \"email\",\n        value: email,\n        onChange: e => setEmail(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '30px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleUpdate,\n          children: \"Save Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button muted-button\",\n          onClick: () => navigate(`/dashboard`),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(Update, \"0L26taKmeqaPbBH5YQg5bPgvnOQ=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Update;\nexport default Update;\nvar _c;\n$RefreshReg$(_c, \"Update\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","jsxDEV","_jsxDEV","Update","_s","id","console","log","employee","setEmployee","navigate","employeesData","JSON","parse","localStorage","getItem","selectedEmployee","find","emp","firstName","setFirstName","lastName","setLastName","email","setEmail","children","fileName","_jsxFileName","lineNumber","columnNumber","handleUpdate","e","preventDefault","alert","updatedEmployee","parseInt","updatedEmployees","index","findIndex","splice","setItem","stringify","className","onSubmit","htmlFor","type","name","value","onChange","target","style","marginTop","onClick","_c","$RefreshReg$"],"sources":["/home/vamshidhar/Desktop/projects/ReactTask/employee/src/Components/Dashboard/update.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nconst Update = () => {\n  const { id } = useParams();\n  console.log(id);\n\n  const [employee, setEmployee] = useState(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // Fetch employeesData from local storage\n    const employeesData =\n      JSON.parse(localStorage.getItem('employees_data')) || [];\n    console.log(employeesData);\n    // Find the employee with the matching id\n    const selectedEmployee = employeesData.find((emp) => emp.id == id);\n    console.log(selectedEmployee);\n    // Update the state with the selected employee\n    setEmployee(selectedEmployee);\n  }, [id]);\n\n  // Initial state should be set when employee data is available\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n\n  // Set initial state when employee data is available\n  useEffect(() => {\n    if (employee) {\n      setFirstName(employee.firstName);\n      setLastName(employee.lastName);\n      setEmail(employee.email);\n    }\n  }, [employee]);\n\n  if (!employee) {\n    return <p>No Employee Found...</p>; // You may want to show a loading message or redirect if the employee is not found.\n  }\n\n  const handleUpdate = (e) => {\n    e.preventDefault();\n\n    if (!firstName || !lastName || !email) {\n      alert('Error!\\nAll fields are required.');\n      return;\n    }\n\n    const updatedEmployee = {\n      id: parseInt(id),\n      firstName,\n      lastName,\n      email,\n    };\n\n    // Update the employee in the local storage\n    const updatedEmployees =\n      JSON.parse(localStorage.getItem('employees_data')) || [];\n    const index = updatedEmployees.findIndex((emp) => emp.id === parseInt(id));\n    console.log('index', index);\n    updatedEmployees.splice(index, 1, updatedEmployee);\n\n    localStorage.setItem('employees_data', JSON.stringify(updatedEmployees));\n    setEmployee(updatedEmployee);\n\n    alert(\n      `Success!\\n${updatedEmployee.firstName} ${updatedEmployee.lastName}'s data has been updated.`\n    );\n\n    // Navigate to the dashboard after the update\n    navigate('/dashboard');\n  };\n\n  return (\n    <div className='small-container'>\n      <form onSubmit={handleUpdate}>\n        <h1>Edit Employee</h1>\n        <label htmlFor='firstName'>First Name</label>\n        <input\n          id='firstName'\n          type='text'\n          name='firstName'\n          value={firstName}\n          onChange={(e) => setFirstName(e.target.value)}\n        />\n        <label htmlFor='lastName'>Last Name</label>\n        <input\n          id='lastName'\n          type='text'\n          name='lastName'\n          value={lastName}\n          onChange={(e) => setLastName(e.target.value)}\n        />\n        <label htmlFor='email'>Email</label>\n        <input\n          id='email'\n          type='email'\n          name='email'\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        />\n        <div style={{ marginTop: '30px' }}>\n          <button onClick={handleUpdate}>Save Changes</button>\n          <button\n            className='button muted-button'\n            onClick={() => navigate(`/dashboard`)}\n          >\n            Cancel\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default Update;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}