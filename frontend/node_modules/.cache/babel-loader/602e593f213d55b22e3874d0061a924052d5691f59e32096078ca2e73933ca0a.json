{"ast":null,"code":"var _jsxFileName = \"/home/vamshidhar/Desktop/projects/ReactTask/employee/src/Components/Dashboard/update.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport MessageModal from '../Dashboard/message';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Update = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n\n  // Initial state should be set when employee data is available\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n  const [employee, setEmployee] = useState(null);\n  const [message, setMessage] = useState(''); // State for message content\n  const [isMessageOpen, setIsMessageOpen] = useState(false); // State for message modal visibility\n\n  useEffect(() => {\n    // Fetch employeesData from local storage\n    const employeesData = JSON.parse(localStorage.getItem('employees_data')) || [];\n    // Find the employee with the matching id\n    const selectedEmployee = employeesData.find(emp => emp.id === parseInt(id));\n    // Update the state with the selected employee\n    setEmployee(selectedEmployee);\n  }, [id]);\n\n  // Set initial state when employee data is available\n  useEffect(() => {\n    if (employee) {\n      setFirstName(employee.firstName);\n      setLastName(employee.lastName);\n      setEmail(employee.email);\n    }\n  }, [employee]);\n  const handleUpdate = e => {\n    e.preventDefault();\n    if (!firstName || !lastName || !email) {\n      setMessage('Error! All fields are required.');\n      setIsMessageOpen(true);\n      return;\n    }\n    const updatedEmployee = {\n      id: parseInt(id),\n      firstName,\n      lastName,\n      email\n    };\n\n    // Update the employee in the local storage\n    const updatedEmployees = JSON.parse(localStorage.getItem('employees_data')) || [];\n    const index = updatedEmployees.findIndex(emp => emp.id === parseInt(id));\n    updatedEmployees.splice(index, 1, updatedEmployee);\n    localStorage.setItem('employees_data', JSON.stringify(updatedEmployees));\n    setEmployee(updatedEmployee);\n    setMessage(`Success! ${updatedEmployee.firstName} ${updatedEmployee.lastName}'s data has been updated.`);\n    setIsMessageOpen(true);\n    // navigate('/dashboard');\n  };\n  const handleCloseMessage = () => {\n    setIsMessageOpen(false);\n    navigate(`/edit/${id}`);\n  };\n  const handleOkMessage = () => {\n    setIsMessageOpen(false);\n    navigate('/dashboard');\n  };\n  if (!employee) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No Employee Found...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"small-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUpdate,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Edit Employee\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"firstName\",\n        children: \"First Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"firstName\",\n        type: \"text\",\n        name: \"firstName\",\n        value: firstName,\n        onChange: e => setFirstName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"lastName\",\n        children: \"Last Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"lastName\",\n        type: \"text\",\n        name: \"lastName\",\n        value: lastName,\n        onChange: e => setLastName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"email\",\n        type: \"email\",\n        name: \"email\",\n        value: email,\n        onChange: e => setEmail(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '30px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"button muted-button\",\n          type: \"submit\",\n          value: \"Save Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button muted-button\",\n          onClick: () => navigate('/dashboard'),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageModal, {\n      isOpen: isMessageOpen,\n      message: message,\n      onClose: handleCloseMessage,\n      onConfirm: handleOkMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(Update, \"FNzkPgYvQSpEc0j0wzHWMGvD9q8=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Update;\nexport default Update;\nvar _c;\n$RefreshReg$(_c, \"Update\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","MessageModal","jsxDEV","_jsxDEV","Update","_s","id","navigate","firstName","setFirstName","lastName","setLastName","email","setEmail","employee","setEmployee","message","setMessage","isMessageOpen","setIsMessageOpen","employeesData","JSON","parse","localStorage","getItem","selectedEmployee","find","emp","parseInt","handleUpdate","e","preventDefault","updatedEmployee","updatedEmployees","index","findIndex","splice","setItem","stringify","handleCloseMessage","handleOkMessage","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","htmlFor","type","name","value","onChange","target","style","marginTop","onClick","isOpen","onClose","onConfirm","_c","$RefreshReg$"],"sources":["/home/vamshidhar/Desktop/projects/ReactTask/employee/src/Components/Dashboard/update.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport MessageModal from '../Dashboard/message';\n\nconst Update = () => {\n  const { id } = useParams();\n  const navigate = useNavigate();\n\n  // Initial state should be set when employee data is available\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n  const [employee, setEmployee] = useState(null);\n\n  const [message, setMessage] = useState(''); // State for message content\n  const [isMessageOpen, setIsMessageOpen] = useState(false); // State for message modal visibility\n\n  useEffect(() => {\n    // Fetch employeesData from local storage\n    const employeesData =\n      JSON.parse(localStorage.getItem('employees_data')) || [];\n    // Find the employee with the matching id\n    const selectedEmployee = employeesData.find(\n      (emp) => emp.id === parseInt(id)\n    );\n    // Update the state with the selected employee\n    setEmployee(selectedEmployee);\n  }, [id]);\n\n  // Set initial state when employee data is available\n  useEffect(() => {\n    if (employee) {\n      setFirstName(employee.firstName);\n      setLastName(employee.lastName);\n      setEmail(employee.email);\n    }\n  }, [employee]);\n\n  const handleUpdate = (e) => {\n    e.preventDefault();\n\n    if (!firstName || !lastName || !email) {\n      setMessage('Error! All fields are required.');\n      setIsMessageOpen(true);\n      return;\n    }\n\n    const updatedEmployee = {\n      id: parseInt(id),\n      firstName,\n      lastName,\n      email,\n    };\n\n    // Update the employee in the local storage\n    const updatedEmployees =\n      JSON.parse(localStorage.getItem('employees_data')) || [];\n    const index = updatedEmployees.findIndex((emp) => emp.id === parseInt(id));\n    updatedEmployees.splice(index, 1, updatedEmployee);\n\n    localStorage.setItem('employees_data', JSON.stringify(updatedEmployees));\n    setEmployee(updatedEmployee);\n\n    setMessage(\n      `Success! ${updatedEmployee.firstName} ${updatedEmployee.lastName}'s data has been updated.`\n    );\n    setIsMessageOpen(true);\n    // navigate('/dashboard');\n  };\n\n  const handleCloseMessage = () => {\n    setIsMessageOpen(false);\n    navigate(`/edit/${id}`);\n  };\n  const handleOkMessage = () => {\n    setIsMessageOpen(false);\n    navigate('/dashboard');\n  };\n\n  if (!employee) {\n    return <p>No Employee Found...</p>;\n  }\n\n  return (\n    <div className='small-container'>\n      <form onSubmit={handleUpdate}>\n        <h1>Edit Employee</h1>\n        <label htmlFor='firstName'>First Name</label>\n        <input\n          id='firstName'\n          type='text'\n          name='firstName'\n          value={firstName}\n          onChange={(e) => setFirstName(e.target.value)}\n        />\n        <label htmlFor='lastName'>Last Name</label>\n        <input\n          id='lastName'\n          type='text'\n          name='lastName'\n          value={lastName}\n          onChange={(e) => setLastName(e.target.value)}\n        />\n        <label htmlFor='email'>Email</label>\n        <input\n          id='email'\n          type='email'\n          name='email'\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        />\n        <div style={{ marginTop: '30px' }}>\n          <input\n            className='button muted-button'\n            type='submit'\n            value='Save Changes'\n          />\n          <button\n            className='button muted-button'\n            onClick={() => navigate('/dashboard')}\n          >\n            Cancel\n          </button>\n        </div>\n      </form>\n      <MessageModal\n        isOpen={isMessageOpen}\n        message={message}\n        onClose={handleCloseMessage}\n        onConfirm={handleOkMessage}\n      />\n    </div>\n  );\n};\n\nexport default Update;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}