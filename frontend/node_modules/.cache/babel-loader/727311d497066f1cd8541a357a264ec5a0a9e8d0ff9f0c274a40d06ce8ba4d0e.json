{"ast":null,"code":"var _jsxFileName = \"/home/vamshidhar/Desktop/projects/ReactTask/employee/src/Components/Dashboard/index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { employeesData } from '../../data/employees';\nimport List from './List';\nimport Create from './create';\nimport Header from './Header';\nimport { useNavigate } from 'react-router-dom';\nimport MessageModal from '../Dashboard/message'; // Import the MessageModal component\nimport ConfirmationModal from '../Dashboard/confirmMessage'; // Import the ConfirmationModal component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Dashboard = ({\n  setIsAuthenticated\n}) => {\n  _s();\n  const [employees, setEmployees] = useState(employeesData);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [isAdding, setIsAdding] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const [message, setMessage] = useState(''); // State for message content\n  const [isMessageOpen, setIsMessageOpen] = useState(false); // State for message modal visibility\n  const [confirmAction, setConfirmAction] = useState(null); // State for storing the action to confirm\n  const [confirmData, setConfirmData] = useState(null); // State for storing the data related to the action\n  const [isConfirmationOpen, setIsConfirmationOpen] = useState(false);\n  const [data, setData] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const storedData = localStorage.getItem('employees_data');\n    if (!storedData) {\n      localStorage.setItem('employees_data', JSON.stringify(employeesData));\n      setEmployees(employeesData);\n    } else {\n      const parsedData = JSON.parse(storedData);\n      setEmployees(parsedData);\n    }\n  }, []);\n  const handleEdit = id => {\n    const [employee] = employees.filter(employee => employee.id === id);\n    setSelectedEmployee(employee);\n    setIsEditing(true);\n    navigate('/edit/' + id);\n  };\n\n  // const handleDelete = (id) => {\n  //   const employee = employees.find((employee) => employee.id === id);\n\n  //   // Set the confirmation action and data\n  //   setConfirmAction('delete');\n  //   setConfirmData({ id, employee });\n  //   setMessage(\n  //     `Are you sure you want to delete ${employee.firstName} ${employee.lastName}'s data?`\n  //   );\n  //   // setData(false);\n  //   // setIsMessageOpen(true);\n  //   setIsConfirmationOpen(true); // Open the message modal\n  // };\n\n  const handleDelete = id => {\n    const employee = employees.find(emp => emp.id === id);\n    if (!employee) {\n      console.error(`Employee with id ${id} not found.`);\n      return; // Exit the function early if no employee is found\n    }\n\n    // Set the confirmation action and data\n    setConfirmAction('delete');\n    setConfirmData({\n      id,\n      employee\n    });\n    setMessage(`Are you sure you want to delete ${employee.firstName} ${employee.lastName}'s data?`);\n    setIsConfirmationOpen(true); // Open the confirmation modal\n  };\n\n  // const cancelDelete = () => {\n  //   setIsConfirmationOpen(false);\n  // };\n\n  const handleConfirmAction = () => {\n    if (confirmAction === 'delete') {\n      const {\n        id,\n        employee\n      } = confirmData;\n      const employeesCopy = employees.filter(emp => emp.id !== id);\n      localStorage.setItem('employees_data', JSON.stringify(employeesCopy));\n      setEmployees(employeesCopy);\n      setMessage(`Deleted! ${employee.firstName} ${employee.lastName}'s data has been deleted.`);\n      setData(true);\n      setIsMessageOpen(true); // Open the message modal\n    }\n    // Add more cases for other confirm actions if needed\n    setConfirmAction(null); // Reset confirm action\n    setConfirmData(null); // Reset confirm data\n  };\n  const handleCloseMessage = () => {\n    setIsMessageOpen(false); // Close the message modal\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [!isAdding && !isEditing && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        setIsAdding: setIsAdding,\n        setIsAuthenticated: setIsAuthenticated\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        employees: employees,\n        handleEdit: handleEdit,\n        handleDelete: handleDelete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), isAdding && /*#__PURE__*/_jsxDEV(Create, {\n      employees: employees,\n      setEmployees: setEmployees,\n      setIsAdding: setIsAdding\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MessageModal, {\n      isOpen: isMessageOpen,\n      message: message,\n      onConfirm: handleConfirmAction // Pass the confirm action handler\n      ,\n      onClose: handleCloseMessage,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConfirmationModal, {\n      isOpen: isConfirmationOpen,\n      message: message,\n      onConfirm: handleConfirmAction,\n      onClose: handleCloseMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"EDAC0D31RaQ+N9SpU1tQh2v3aXU=\", false, function () {\n  return [useNavigate];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","employeesData","List","Create","Header","useNavigate","MessageModal","ConfirmationModal","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","setIsAuthenticated","_s","employees","setEmployees","selectedEmployee","setSelectedEmployee","isAdding","setIsAdding","isEditing","setIsEditing","message","setMessage","isMessageOpen","setIsMessageOpen","confirmAction","setConfirmAction","confirmData","setConfirmData","isConfirmationOpen","setIsConfirmationOpen","data","setData","navigate","storedData","localStorage","getItem","setItem","JSON","stringify","parsedData","parse","handleEdit","id","employee","filter","handleDelete","find","emp","console","error","firstName","lastName","handleConfirmAction","employeesCopy","handleCloseMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","onConfirm","onClose","_c","$RefreshReg$"],"sources":["/home/vamshidhar/Desktop/projects/ReactTask/employee/src/Components/Dashboard/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { employeesData } from '../../data/employees';\nimport List from './List';\nimport Create from './create';\nimport Header from './Header';\nimport { useNavigate } from 'react-router-dom';\nimport MessageModal from '../Dashboard/message'; // Import the MessageModal component\nimport ConfirmationModal from '../Dashboard/confirmMessage'; // Import the ConfirmationModal component\n\nconst Dashboard = ({ setIsAuthenticated }) => {\n  const [employees, setEmployees] = useState(employeesData);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [isAdding, setIsAdding] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const [message, setMessage] = useState(''); // State for message content\n  const [isMessageOpen, setIsMessageOpen] = useState(false); // State for message modal visibility\n  const [confirmAction, setConfirmAction] = useState(null); // State for storing the action to confirm\n  const [confirmData, setConfirmData] = useState(null); // State for storing the data related to the action\n  const [isConfirmationOpen, setIsConfirmationOpen] = useState(false);\n  const [data, setData] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const storedData = localStorage.getItem('employees_data');\n    if (!storedData) {\n      localStorage.setItem('employees_data', JSON.stringify(employeesData));\n      setEmployees(employeesData);\n    } else {\n      const parsedData = JSON.parse(storedData);\n      setEmployees(parsedData);\n    }\n  }, []);\n\n  const handleEdit = (id) => {\n    const [employee] = employees.filter((employee) => employee.id === id);\n\n    setSelectedEmployee(employee);\n    setIsEditing(true);\n    navigate('/edit/' + id);\n  };\n\n  // const handleDelete = (id) => {\n  //   const employee = employees.find((employee) => employee.id === id);\n\n  //   // Set the confirmation action and data\n  //   setConfirmAction('delete');\n  //   setConfirmData({ id, employee });\n  //   setMessage(\n  //     `Are you sure you want to delete ${employee.firstName} ${employee.lastName}'s data?`\n  //   );\n  //   // setData(false);\n  //   // setIsMessageOpen(true);\n  //   setIsConfirmationOpen(true); // Open the message modal\n  // };\n\n  const handleDelete = (id) => {\n    const employee = employees.find((emp) => emp.id === id);\n\n    if (!employee) {\n      console.error(`Employee with id ${id} not found.`);\n      return; // Exit the function early if no employee is found\n    }\n\n    // Set the confirmation action and data\n    setConfirmAction('delete');\n    setConfirmData({ id, employee });\n    setMessage(\n      `Are you sure you want to delete ${employee.firstName} ${employee.lastName}'s data?`\n    );\n    setIsConfirmationOpen(true); // Open the confirmation modal\n  };\n\n  // const cancelDelete = () => {\n  //   setIsConfirmationOpen(false);\n  // };\n\n  const handleConfirmAction = () => {\n    if (confirmAction === 'delete') {\n      const { id, employee } = confirmData;\n      const employeesCopy = employees.filter((emp) => emp.id !== id);\n      localStorage.setItem('employees_data', JSON.stringify(employeesCopy));\n      setEmployees(employeesCopy);\n\n      setMessage(\n        `Deleted! ${employee.firstName} ${employee.lastName}'s data has been deleted.`\n      );\n      setData(true);\n      setIsMessageOpen(true); // Open the message modal\n    }\n    // Add more cases for other confirm actions if needed\n    setConfirmAction(null); // Reset confirm action\n    setConfirmData(null); // Reset confirm data\n  };\n\n  const handleCloseMessage = () => {\n    setIsMessageOpen(false); // Close the message modal\n  };\n\n  return (\n    <div className='container'>\n      {!isAdding && !isEditing && (\n        <>\n          <Header\n            setIsAdding={setIsAdding}\n            setIsAuthenticated={setIsAuthenticated}\n          />\n          <List\n            employees={employees}\n            handleEdit={handleEdit}\n            handleDelete={handleDelete}\n          />\n        </>\n      )}\n      {isAdding && (\n        <Create\n          employees={employees}\n          setEmployees={setEmployees}\n          setIsAdding={setIsAdding}\n        />\n      )}\n      <MessageModal\n        isOpen={isMessageOpen}\n        message={message}\n        onConfirm={handleConfirmAction} // Pass the confirm action handler\n        onClose={handleCloseMessage}\n        data={data}\n      />\n      <ConfirmationModal\n        isOpen={isConfirmationOpen}\n        message={message}\n        onConfirm={handleConfirmAction}\n        onClose={handleCloseMessage}\n      />\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}