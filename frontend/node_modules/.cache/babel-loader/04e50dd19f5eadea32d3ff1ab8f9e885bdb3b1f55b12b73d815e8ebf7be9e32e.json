{"ast":null,"code":"var _jsxFileName = \"/home/vamshidhar/Desktop/projects/ReactTask/employee/frontend/src/Components/Dashboard/confirmMessage.js\";\nimport React from 'react';\nimport Modal from 'react-modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConfirmationModal = ({\n  isOpen,\n  message,\n  onConfirm,\n  onClose\n}) => {\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: isOpen,\n    contentLabel: \"Confirmation Modal\",\n    style: {\n      content: {\n        top: '50%',\n        left: '50%',\n        right: 'auto',\n        bottom: 'auto',\n        marginRight: '-50%',\n        transform: 'translate(-50%, -50%)',\n        maxWidth: '400px',\n        // Adjust the maximum width as per your requirement\n        maxHeight: '80vh',\n        // Adjust the maximum height as per your requirement\n        overflow: 'auto' // Enable scrolling if the content overflows the modal\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Confirmation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        gap: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onConfirm,\n        children: \"Yes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          backgroundColor: 'red'\n        },\n        onClick: onClose,\n        children: \"No\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n_c = ConfirmationModal;\nexport default ConfirmationModal;\nvar _c;\n$RefreshReg$(_c, \"ConfirmationModal\");","map":{"version":3,"names":["React","Modal","jsxDEV","_jsxDEV","ConfirmationModal","isOpen","message","onConfirm","onClose","contentLabel","style","content","top","left","right","bottom","marginRight","transform","maxWidth","maxHeight","overflow","children","fileName","_jsxFileName","lineNumber","columnNumber","display","justifyContent","gap","onClick","backgroundColor","_c","$RefreshReg$"],"sources":["/home/vamshidhar/Desktop/projects/ReactTask/employee/frontend/src/Components/Dashboard/confirmMessage.js"],"sourcesContent":["import React from 'react';\nimport Modal from 'react-modal';\n\nconst ConfirmationModal = ({ isOpen, message, onConfirm, onClose }) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      contentLabel='Confirmation Modal'\n      style={{\n        content: {\n          top: '50%',\n          left: '50%',\n          right: 'auto',\n          bottom: 'auto',\n          marginRight: '-50%',\n          transform: 'translate(-50%, -50%)',\n          maxWidth: '400px', // Adjust the maximum width as per your requirement\n          maxHeight: '80vh', // Adjust the maximum height as per your requirement\n          overflow: 'auto', // Enable scrolling if the content overflows the modal\n        },\n      }}\n    >\n      <h2>Confirmation</h2>\n      <p>{message}</p>\n      <div style={{ display: 'flex', justifyContent: 'center', gap: '10px' }}>\n        <button onClick={onConfirm}>Yes</button>\n        <button style={{ backgroundColor: 'red' }} onClick={onClose}>\n          No\n        </button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default ConfirmationModal;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,MAAM;EAAEC,OAAO;EAAEC,SAAS;EAAEC;AAAQ,CAAC,KAAK;EACrE,oBACEL,OAAA,CAACF,KAAK;IACJI,MAAM,EAAEA,MAAO;IACfI,YAAY,EAAC,oBAAoB;IACjCC,KAAK,EAAE;MACLC,OAAO,EAAE;QACPC,GAAG,EAAE,KAAK;QACVC,IAAI,EAAE,KAAK;QACXC,KAAK,EAAE,MAAM;QACbC,MAAM,EAAE,MAAM;QACdC,WAAW,EAAE,MAAM;QACnBC,SAAS,EAAE,uBAAuB;QAClCC,QAAQ,EAAE,OAAO;QAAE;QACnBC,SAAS,EAAE,MAAM;QAAE;QACnBC,QAAQ,EAAE,MAAM,CAAE;MACpB;IACF,CAAE;IAAAC,QAAA,gBAEFlB,OAAA;MAAAkB,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBtB,OAAA;MAAAkB,QAAA,EAAIf;IAAO;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChBtB,OAAA;MAAKO,KAAK,EAAE;QAAEgB,OAAO,EAAE,MAAM;QAAEC,cAAc,EAAE,QAAQ;QAAEC,GAAG,EAAE;MAAO,CAAE;MAAAP,QAAA,gBACrElB,OAAA;QAAQ0B,OAAO,EAAEtB,SAAU;QAAAc,QAAA,EAAC;MAAG;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACxCtB,OAAA;QAAQO,KAAK,EAAE;UAAEoB,eAAe,EAAE;QAAM,CAAE;QAACD,OAAO,EAAErB,OAAQ;QAAAa,QAAA,EAAC;MAE7D;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEZ,CAAC;AAACM,EAAA,GA7BI3B,iBAAiB;AA+BvB,eAAeA,iBAAiB;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}